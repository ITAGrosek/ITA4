// Pridobi vse knjige
app.get('/api/books', async (req, res) => {
  try {
    const response = await axios.get(`${BOOK_SERVICE_BASE_URL}/books`);
    res.status(response.status).json(response.data);
  } catch (error) {
    console.error('Error fetching all books:', error.message);
    res.sendStatus(500);
  }
});

// Pridobi knjigo po ID
app.get('/api/books/:id', async (req, res) => {
  try {
    const response = await axios.get(`${BOOK_SERVICE_BASE_URL}/books/${req.params.id}`);
    res.status(response.status).json(response.data);
  } catch (error) {
    console.error(`Error fetching book with ID ${req.params.id}:`, error.message);
    res.sendStatus(500);
  }
});

// Ustvari novo knjigo
app.post('/api/books', async (req, res) => {
  try {
    const response = await axios.post(`${BOOK_SERVICE_BASE_URL}/books`, req.body);
    res.status(response.status).json(response.data);
  } catch (error) {
    console.error('Error creating a book:', error.message);
    res.sendStatus(500);
  }
});

// Posodobi knjigo
app.put('/api/books/:id', async (req, res) => {
  try {
    const response = await axios.put(`${BOOK_SERVICE_BASE_URL}/books/${req.params.id}`, req.body);
    res.status(response.status).json(response.data);
  } catch (error) {
    console.error(`Error updating book with ID ${req.params.id}:`, error.message);
    res.sendStatus(500);
  }
});

// Izbriši knjigo
app.delete('/api/books/:id', async (req, res) => {
  try {
    const response = await axios.delete(`${BOOK_SERVICE_BASE_URL}/books/${req.params.id}`);
    res.status(response.status).send('Book deleted successfully');
  } catch (error) {
    console.error(`Error deleting book with ID ${req.params.id}:`, error.message);
    res.sendStatus(500);
  }
});


// Pridobi vse rezervacije
app.get('/api/reservations', async (req, res) => {
  try {
    const response = await axios.get(`${RESERVATION_SERVICE_BASE_URL}/reservations`);
    res.status(response.status).json(response.data);
  } catch (error) {
    console.error('Error fetching all reservations:', error.message);
    res.sendStatus(500);
  }
});

// Pridobi rezervacijo po ID
app.get('/api/reservations/:id', async (req, res) => {
  try {
    const response = await axios.get(`${RESERVATION_SERVICE_BASE_URL}/reservations/${req.params.id}`);
    res.status(response.status).json(response.data);
  } catch (error) {
    console.error(`Error fetching reservation with ID ${req.params.id}:`, error.message);
    res.sendStatus(500);
  }
});

// Ustvari novo rezervacijo
app.post('/api/reservations', async (req, res) => {
  try {
    const response = await axios.post(`${RESERVATION_SERVICE_BASE_URL}/reservations`, req.body);
    res.status(response.status).json(response.data);
  } catch (error) {
    console.error('Error creating a reservation:', error.message);
    res.sendStatus(500);
  }
});

// Posodobi rezervacijo
app.put('/api/reservations/:id', async (req, res) => {
  try {
    const response = await axios.put(`${RESERVATION_SERVICE_BASE_URL}/reservations/${req.params.id}`, req.body);
    res.status(response.status).json(response.data);
  } catch (error) {
    console.error(`Error updating reservation with ID ${req.params.id}:`, error.message);
    res.sendStatus(500);
  }
});

// Izbriši rezervacijo
app.delete('/api/reservations/:id', async (req, res) => {
  try {
    const response = await axios.delete(`${RESERVATION_SERVICE_BASE_URL}/reservations/${req.params.id}`);
    res.status(response.status).send('Reservation deleted successfully');
  } catch (error) {
    console.error(`Error deleting reservation with ID ${req.params.id}:`, error.message);
    res.sendStatus(500);
  }
});
